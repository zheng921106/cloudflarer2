name: Cloudflare R2 Bucket Migration (rclone) - Fixed Version

on:
  workflow_dispatch:
    inputs:
      SRC_BUCKET:
        description: "A桶名称（来源桶名）"
        required: true
        type: string
        default: "yasyadong001"
      DST_BUCKET:
        description: "B桶名称（目标桶名）"
        required: true
        type: string
        default: "yas009"
      MODE:
        description: "迁移模式"
        required: true
        default: "copy"
        type: choice
        options: ["copy", "sync"]
      TRANSFERS:
        description: "并发传输数"
        required: true
        default: "8"
        type: string
      CHECKERS:
        description: "并发校验数"
        required: true
        default: "16"
        type: string
      RESUME:
        description: "断点续传模式"
        required: true
        default: "true"
        type: choice
        options: ["true", "false"]

jobs:
  migrate:
    name: Fixed R2 Migration
    runs-on: ubuntu-latest
    timeout-minutes: 8640
    env:
      SRC_BUCKET: ${{ inputs.SRC_BUCKET }}
      DST_BUCKET: ${{ inputs.DST_BUCKET }}
      MODE: ${{ inputs.MODE }}
      TRANSFERS: ${{ inputs.TRANSFERS }}
      CHECKERS: ${{ inputs.CHECKERS }}
      RESUME: ${{ inputs.RESUME }}

    steps:
      - name: Install rclone
        run: |
          set -e
          curl -fsSL https://rclone.org/install.sh | sudo bash
          rclone version

      - name: Prepare rclone config
        run: |
          set -e
          mkdir -p ~/.config/rclone

          cat > ~/.config/rclone/rclone.conf <<EOF
          [r2src]
          type = s3
          provider = Cloudflare
          access_key_id = ${R2PUSH_ACCESS_KEY}
          secret_access_key = ${R2PUSH_SECRET_KEY}
          endpoint = ${R2PUSH_ENDPOINT}
          force_path_style = true
          acl = private
          chunk_size = 32M
          upload_cutoff = 32M
          no_check_bucket = true

          [r2dst]
          type = s3
          provider = Cloudflare
          access_key_id = ${R2DST_ACCESS_KEY}
          secret_access_key = ${R2DST_SECRET_KEY}
          endpoint = ${R2DST_ENDPOINT}
          force_path_style = true
          acl = private
          chunk_size = 32M
          upload_cutoff = 32M
          no_check_bucket = true
          EOF

          echo "✅ rclone.conf 已生成"
        env:
          R2PUSH_ACCESS_KEY: ${{ secrets.R2PUSH_ACCESS_KEY }}
          R2PUSH_SECRET_KEY: ${{ secrets.R2PUSH_SECRET_KEY }}
          R2PUSH_ENDPOINT: ${{ secrets.R2PUSH_ENDPOINT }}
          R2DST_ACCESS_KEY: ${{ secrets.R2DST_ACCESS_KEY }}
          R2DST_SECRET_KEY: ${{ secrets.R2DST_SECRET_KEY }}
          R2DST_ENDPOINT: ${{ secrets.R2DST_ENDPOINT }}

      - name: Create fixed migration script
        run: |
          set -e
          cat > /tmp/migrate.sh <<'EOF'
          #!/bin/bash
          set -e

          # 修正后的迁移参数 - 移除冲突的 --verbose
          COMMON_ARGS="--progress --log-level INFO --stats=60s --stats-one-line \
          --transfers=${TRANSFERS} --checkers=${CHECKERS} \
          --s3-upload-cutoff=32M --s3-chunk-size=32M \
          --checksum --size-only \
          --retries=20 --retries-sleep=60s --low-level-retries=50 \
          --timeout=600s --contimeout=300s \
          --buffer-size=128M --use-mmap \
          --multi-thread-streams=2 --multi-thread-cutoff=16M \
          --fast-list --no-traverse --no-update-modtime \
          --s3-disable-checksum --disable-http2"

          # 断点续传支持
          if [ "$RESUME" = "true" ]; then
            COMMON_ARGS="$COMMON_ARGS --backup-dir=r2dst:${DST_BUCKET}-backup/retry-files"
          fi

          echo "开始迁移 - 参数: $COMMON_ARGS"
          echo "当前时间: $(date)"

          MAX_RETRIES=3
          ATTEMPT=1
          RC=1

          while [ $ATTEMPT -le $MAX_RETRIES ] && [ $RC -ne 0 ]; do
            echo "=== 尝试第 $ATTEMPT/$MAX_RETRIES 次迁移 ==="
            
            if [[ "${MODE}" == "sync" ]]; then
              rclone sync r2src:"${SRC_BUCKET}" r2dst:"${DST_BUCKET}" $COMMON_ARGS --delete-after
            else
              rclone copy r2src:"${SRC_BUCKET}" r2dst:"${DST_BUCKET}" $COMMON_ARGS
            fi
            
            RC=$?
            
            if [ $RC -eq 0 ]; then
              echo "✅ 迁移成功完成"
              break
            else
              echo "❌ 迁移失败 (代码: $RC)，等待重试..."
              sleep 300
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
          done

          if [ $RC -ne 0 ]; then
            echo "❌ 所有重试尝试均失败"
            exit $RC
          fi
          EOF

          chmod +x /tmp/migrate.sh
        env:
          TRANSFERS: ${{ inputs.TRANSFERS }}
          CHECKERS: ${{ inputs.CHECKERS }}
          RESUME: ${{ inputs.RESUME }}

      - name: Run fixed migration
        run: |
          set -e
          echo "== 执行修正后的迁移 =="
          /tmp/migrate.sh

      - name: Verify migration
        run: |
          set -e
          echo "== 迁移验证 =="
          
          echo "文件数量对比:"
          SRC_COUNT=$(rclone ls r2src:"${SRC_BUCKET}" | wc -l || echo "N/A")
          DST_COUNT=$(rclone ls r2dst:"${DST_BUCKET}" | wc -l || echo "N/A")
          echo "源桶: $SRC_COUNT 文件 | 目标桶: $DST_COUNT 文件"
          
          echo "随机检查20个文件:"
          for i in $(seq 1 20); do
            file=$(rclone lsf r2src:"${SRC_BUCKET}" -R --files-only | shuf -n 1)
            if [ -n "$file" ]; then
              src_size=$(rclone size r2src:"${SRC_BUCKET}/$file" --json 2>/dev/null | jq -r '.bytes // "ERROR"' || echo "ERROR")
              dst_size=$(rclone size r2dst:"${DST_BUCKET}/$file" --json 2>/dev/null | jq -r '.bytes // "ERROR"' || echo "ERROR")
              
              if [ "$src_size" = "ERROR" ] || [ "$dst_size" = "ERROR" ]; then
                echo "❌ $file - 检查错误"
              elif [ "$src_size" != "$dst_size" ]; then
                echo "❌ $file - 大小不一致: 源=$src_size, 目标=$dst_size"
              else
                echo "✅ $file - 一致"
              fi
            fi
          done

      - name: Final report
        if: always()
        run: |
          {
            echo "### R2迁移报告"
            echo "- **状态**: 完成"
            echo "- **模式**: \`${MODE}\`"
            echo "- **源桶**: \`${SRC_BUCKET}\`"
            echo "- **目标桶**: \`${DST_BUCKET}\`"
            echo "- **并发**: ${TRANSFERS}传输/${CHECKERS}校验"
            echo ""
            echo "#### 统计信息"
            echo "\`\`\`"
            echo "源桶:"
            rclone size r2src:"${SRC_BUCKET}" --json 2>/dev/null | jq || echo "无法获取统计"
            echo ""
            echo "目标桶:"
            rclone size r2dst:"${DST_BUCKET}" --json 2>/dev/null | jq || echo "无法获取统计"
            echo "\`\`\`"
          } >> $GITHUB_STEP_SUMMARY
